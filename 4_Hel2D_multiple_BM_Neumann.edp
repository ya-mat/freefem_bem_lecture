//ff-mpirun -np 1 4_Hel2D_multiple_BM_Neumann.edp -wg

load "bem"
load "gsl"
load "plotPDF"

include "getARGV.idp"

complex k = getARGV("-k",3.); // wavenumber
complex alpha = 1i/k;

cout << "k" << k << endl;
cout << "alpha" << alpha << endl;

// incident wave
real angle = 0;
func finc = exp(1i*k*(x*cos(angle)+y*sin(angle)));
func dxfinc = 1i*k*cos(angle)*finc;
func dyfinc = 1i*k*sin(angle)*finc;

// Mesh four circle
//int numCells = 1;
//int numCells = 4;
int numCells = 16;
int no = 200;
int n = no*numCells;
//border circle1(t=0, 2*pi){x=cos(t)	; y=sin(t)	; z=0;}
//border circle2(t=0, 2*pi){x=cos(t) + 4.0; y=sin(t)	; z=0;}
//border circle3(t=0, 2*pi){x=cos(t)	; y=sin(t) - 4.0; z=0;}
//border circle4(t=0, 2*pi){x=cos(t) + 4.0; y=sin(t) - 4.0; z=0;}
//meshL Th = buildmeshL(circle1(no) + circle2(no) + circle3(no) + circle4(no));

// Mesh four star
func real starX1(real t){
  //real a = 0.4; // a < 1.0, near a is sharp
  //real b = 6.0; // number of hands
  real a = 0.15; // a < 1.0, near a is sharp
  real b = 8.0; // number of hands
  return (1.0 + a*cos(b*t))*cos(t)/(1.0 + a);
}
func real starX2(real t){
  //real a = 0.4; // a < 1.0, near a is sharp
  //real b = 6.0; // number of hands
  real a = 0.15; // a < 1.0, near a is sharp
  real b = 8.0; // number of hands
  return (1.0 + a*cos(b*t))*sin(t)/(1.0 + a);
}
func real rotThX1(real x1, real x2, real th){
  return cos(th)*x1 - sin(th)*x2;
}
func real rotThX2(real x1, real x2, real th){
  return sin(th)*x1 + cos(th)*x2;
}
//border star1(t=0, 2*pi){x=starX1(t)	 ; y=starX2(t)	    ; z=0;}
//border star2(t=0, 2*pi){x=starX1(t) + 4.0; y=starX2(t)	    ; z=0;}
//border star3(t=0, 2*pi){x=starX1(t)	 ; y=starX2(t) - 4.0; z=0;}
//border star4(t=0, 2*pi){x=starX1(t) + 4.0; y=starX2(t) - 4.0; z=0;}
//border star5(t=0, 2*pi){x=starX1(t) + 8.0; y=starX2(t)      ; z=0;}
//border star6(t=0, 2*pi){x=starX1(t) + 12.0; y=starX2(t)      ; z=0;}
//border star7(t=0, 2*pi){x=starX1(t) + 8.0; y=starX2(t) - 4.0; z=0;}
//border star8(t=0, 2*pi){x=starX1(t) + 12.0; y=starX2(t) - 4.0; z=0;}
//border star9(t=0, 2*pi){x=starX1(t)       ; y=starX2(t) - 8.0; z=0;}
//border star10(t=0, 2*pi){x=starX1(t) + 4.0; y=starX2(t) - 8.0; z=0;}
//border star11(t=0, 2*pi){x=starX1(t)      ; y=starX2(t) - 12.0; z=0;}
//border star12(t=0, 2*pi){x=starX1(t) + 4.0; y=starX2(t) - 12.0; z=0;}
//border star13(t=0, 2*pi){x=starX1(t) + 8.0; y=starX2(t) - 8.0; z=0;}
//border star14(t=0, 2*pi){x=starX1(t) + 12.0; y=starX2(t) - 8.0; z=0;}
//border star15(t=0, 2*pi){x=starX1(t) + 8.0; y=starX2(t) - 12.0; z=0;}
//border star16(t=0, 2*pi){x=starX1(t) + 12.0; y=starX2(t) - 12.0; z=0;}
border  star1(t=0, 2*pi){x=rotThX1(starX1(t), starX2(t),  0.0)       ; y=rotThX2(starX1(t), starX2(t),  0.0)       ; z=0;}
border  star2(t=0, 2*pi){x=rotThX1(starX1(t), starX2(t),  1.0) + 4.0 ; y=rotThX2(starX1(t), starX2(t),  1.0)       ; z=0;}
border  star3(t=0, 2*pi){x=rotThX1(starX1(t), starX2(t),  2.0)       ; y=rotThX2(starX1(t), starX2(t),  2.0) - 4.0 ; z=0;}
border  star4(t=0, 2*pi){x=rotThX1(starX1(t), starX2(t),  3.0) + 4.0 ; y=rotThX2(starX1(t), starX2(t),  3.0) - 4.0 ; z=0;}
border  star5(t=0, 2*pi){x=rotThX1(starX1(t), starX2(t),  4.0) + 8.0 ; y=rotThX2(starX1(t), starX2(t),  4.0)       ; z=0;}
border  star6(t=0, 2*pi){x=rotThX1(starX1(t), starX2(t),  5.0) + 12.0; y=rotThX2(starX1(t), starX2(t),  5.0)       ; z=0;}
border  star7(t=0, 2*pi){x=rotThX1(starX1(t), starX2(t),  6.0) + 8.0 ; y=rotThX2(starX1(t), starX2(t),  6.0) - 4.0 ; z=0;}
border  star8(t=0, 2*pi){x=rotThX1(starX1(t), starX2(t),  7.0) + 12.0; y=rotThX2(starX1(t), starX2(t),  7.0) - 4.0 ; z=0;}
border  star9(t=0, 2*pi){x=rotThX1(starX1(t), starX2(t),  8.0)       ; y=rotThX2(starX1(t), starX2(t),  8.0) - 8.0 ; z=0;}
border star10(t=0, 2*pi){x=rotThX1(starX1(t), starX2(t),  9.0) + 4.0 ; y=rotThX2(starX1(t), starX2(t),  9.0) - 8.0 ; z=0;}
border star11(t=0, 2*pi){x=rotThX1(starX1(t), starX2(t), 10.0)       ; y=rotThX2(starX1(t), starX2(t), 10.0) - 12.0; z=0;}
border star12(t=0, 2*pi){x=rotThX1(starX1(t), starX2(t), 11.0) + 4.0 ; y=rotThX2(starX1(t), starX2(t), 11.0) - 12.0; z=0;}
border star13(t=0, 2*pi){x=rotThX1(starX1(t), starX2(t), 12.0) + 8.0 ; y=rotThX2(starX1(t), starX2(t), 12.0) - 8.0 ; z=0;}
border star14(t=0, 2*pi){x=rotThX1(starX1(t), starX2(t), 13.0) + 12.0; y=rotThX2(starX1(t), starX2(t), 13.0) - 8.0 ; z=0;}
border star15(t=0, 2*pi){x=rotThX1(starX1(t), starX2(t), 14.0) + 8.0 ; y=rotThX2(starX1(t), starX2(t), 14.0) - 12.0; z=0;}
border star16(t=0, 2*pi){x=rotThX1(starX1(t), starX2(t), 15.0) + 12.0; y=rotThX2(starX1(t), starX2(t), 15.0) - 12.0; z=0;}
//meshL Th = buildmeshL(star1(no));
//meshL Th = buildmeshL(star1(no) + star2(no) + star3(no) + star4(no));
meshL Th = buildmeshL(star1(no) + star2(no) + star3(no) + star4(no)
                      + star5(no) + star6(no) + star7(no) + star8(no)
                      + star9(no) + star10(no) + star11(no) + star12(no)
                      + star13(no) + star14(no) + star15(no) + star16(no)
                      );
Th = OrientNormal(Th, unbounded=1); // inward normal

plot(Th, wait=true);

// Dof
fespace Uh(Th,P1);

// Hmatrix for formulation of first kind
BemKernel ker1("DL",k=k);
BemKernel DL("DL",k=k);
BemKernel HS("HS",k=k);
BemKernel BM = DL + (alpha)*HS;
//varf vk1(u,v)=int1dx1d(Th)(Th)(BEM(ker1,u,v)) - int1d(Th)(0.5*u*v); // Not BM
varf vk1(u,v)=int1dx1d(Th)(Th)(BEM(BM,u,v)) - int1d(Th)(0.5*u*v); // BM
HMatrix<complex> HFirstKind = vk1(Uh,Uh,eta=10,eps=1e-8,minclustersize=10);
if (mpirank == 0) cout << HFirstKind.infos << endl;
//display(HFirstKind);

// Solve formulation of first kind
Uh<complex> uFirstKind, bFirstKind;
//varf vmassFirstKind(u,v) = int1d(Th)(-finc*v); // Not BM
varf vmassFirstKind(u,v) = int1d(Th)(-(finc + alpha*(dxfinc*Tl.y - dyfinc*Tl.x))*v); // BM
bFirstKind[] = vmassFirstKind(0,Uh);
uFirstKind[] = HFirstKind^-1*bFirstKind[];
if(mpirank == 0){
  ofstream ofs("u_boundary_4_Hel2D_multiple_BM_Neumann.txt");
  ofs << "# i, x, y, real(u), imag(u)" << endl;
  for(int i = 0; i < n; i++){
    ofs << i << " " << Th(i).x << " " << Th(i).y << " " << real(uFirstKind[][i]) << " " << imag(uFirstKind[][i]) << endl;
  }
 }
