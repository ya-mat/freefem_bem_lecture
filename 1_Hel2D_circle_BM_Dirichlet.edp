//ff-mpirun -np 4 1_Hel2D_circle_BM_Dirichlet.edp

load "bem"
load "gsl"
load "plotPDF"

include "getARGV.idp"

complex k = getARGV("-k",10.); // wavenumber
complex alpha = 1i/k;

cout << "k" << k << endl;
cout << "alpha" << alpha << endl;

// incident wave
real angle = 0;
func finc = exp(1i*k*(x*cos(angle)+y*sin(angle)));
func dxfinc = 1i*k*cos(angle)*finc;
func dyfinc = 1i*k*sin(angle)*finc;

//  Mesh
int n = 200;
border circle(t=0, 2*pi){x=cos(t); y=sin(t); z=0;}
meshL Th = buildmeshL(circle(n));
Th = OrientNormal(Th, unbounded=1); // inward normal

// Dof
fespace Uh(Th,P1);

// exact solution function on domain
real Robj = 1;
func complex exactsol(real xi, real yi){
    real r = sqrt(xi^2 + yi^2);
    real theta = atan2(yi,xi);
    complex value = 0;
    for (int n=0;n<100;n++){
        real JnAtr    = gslsfbesselJn(n,real(k)*r);
        real YnAtr    = gslsfbesselYn(n,real(k)*r);
        real JnAtRobj = gslsfbesselJn(n,real(k)*Robj);
        real YnAtRobj = gslsfbesselYn(n,real(k)*Robj);
	value+=2*(-1*JnAtRobj*(JnAtr+1i*YnAtr)/(JnAtRobj+1i*YnAtRobj))*exp(1i*n*pi/2.)*cos(n*(theta-angle));
        if (n==0){
            value*=0.5;
        }
    }
    return value;
}

// Hmatrix for formulation of first kind
BemKernel ker1("SL",k=k);
BemKernel SL("SL",k=k);
BemKernel TDL("TDL",k=k);
BemKernel BM = SL + (alpha)*TDL;
//varf vk1(u,v)=int1dx1d(Th)(Th)(BEM(ker1,u,v)); // Not BM
varf vk1(u,v) = int1dx1d(Th)(Th)(BEM(BM,u,v)) - int1d(Th)(alpha*0.5*u*v);
HMatrix<complex> HFirstKind = vk1(Uh,Uh,eta=10,eps=1e-8,minclustersize=10);
if (mpirank == 0) cout << HFirstKind.infos << endl;
display(HFirstKind);

// Solve formulation of first kind
Uh<complex> uFirstKind, bFirstKind;
//varf vmassFirstKind(u,v) = int1d(Th)(-(finc)*v); // Not BM
varf vmassFirstKind(u,v) = int1d(Th)(-(finc + alpha*(dxfinc*Tl.y - dyfinc*Tl.x))*v);
bFirstKind[] = vmassFirstKind(0,Uh);
uFirstKind[] = HFirstKind^-1*bFirstKind[];
if(mpirank == 0){
  ofstream ofs("q_boundary_1_Hel2D_circle_BM_Dirichlet.txt");
  ofs << "# i, x, y, real(u), imag(u)" << endl;
  for(int i = 0; i < n; i++){
    ofs << i << " " << Th(i).x << " " << Th(i).y << " " << real(uFirstKind[][i]) << " " << imag(uFirstKind[][i]) << endl;
  }
 }

// Mesh output
int R = 4;
int np = 5*R*real(k);

border b1(t=-R, R){x=t; y=-R;}
border b2(t=-R, R){x=R; y=t;}
border b3(t=-R, R){x=-t; y=R;}
border b4(t=-R, R){x=-R; y=-t;}
border circleout(t=0, 2*pi){x=1.1*cos(t); y=1.1*sin(t); z=0;}

mesh ThOut = buildmesh(b1(np)+b2(np)+b3(np)+b4(np)+circleout(-np*pi/R));

plot(ThOut, wait=true);

// Incident wave in volume
fespace UhOut(ThOut,P1);
UhOut<complex> vinc;
vinc = finc;

// HMatrix for potential
BemPotential Pot("SL",k=k);
varf vp(u,v)=int1d(Th)(POT(Pot,u,v));
HMatrix<complex> HPot = vp(Uh,UhOut,eta=10,eps=1e-6,minclustersize=10);

if (mpirank == 0) cout << HPot.infos << endl;
display(HPot);

// Solution for formulation of first kind
UhOut<complex> vFirstKind, exacti = 0, exact;

// Compare to the exact solution:
for [i, bi : exacti[]]
if (i >= mpirank*ceil(1.*UhOut.ndof/mpisize) && i < (mpirank+1)*ceil(1.*UhOut.ndof/mpisize))
    bi = exactsol(ThOut(i).x,ThOut(i).y);
mpiReduce(exacti[],exact[],processor(0,mpiCommWorld),mpiSUM);

exact = exact + finc;

vFirstKind[] = HPot*uFirstKind[];
vFirstKind[] += vinc[];

UhOut<complex> diff = exact-vFirstKind;
if (mpirank == 0){
  cout << "###############################################" << endl;
  cout << "relative L2 error = " << diff[].l2/exact[].l2 << endl;
  cout << "###############################################" << endl;
 }

if (mpirank == 0){
  plotPDF("solution_1_Hel2D_circle_BM_Dirichlet.pdf", ThOut, vFirstKind, meshpage=0,zreal=1,zimag=1,isoline=0,zabs=1);
  plotPDF("exact_1_Hel2D_circle_BM_Dirichlet.pdf", ThOut, exact, meshpage=0,zreal=1,zimag=1,isoline=0,zabs=1);
  plotPDF("diff_1_Hel2D_circle_BM_Dirichlet.pdf", ThOut, diff, meshpage=0,zreal=1,zimag=1,isoline=0,zabs=1);
}
